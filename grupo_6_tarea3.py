# -*- coding: utf-8 -*-
"""GRUPO_6_TAREA3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e_iWnPXa1w_RAplVB8t17XMeB5jGmfuy

I Utilizando scipy. stats, crea un programa que modele la probabilidad de obtener un
número específico de éxitos en una serie de lanzamientos de una moneda sin trucos
(probabilidad de éxito p = 0. 5). Genera la probabilidad de obtener exactamente 7 caras
en 10 lanzamientos
"""

from scipy.stats import binom
import pandas as pd
import matplotlib.pyplot as plt

import numpy as np

import scipy.stats as stats

# Parámetros
n = 10
k = 7
p = 0.5

#Probabilidad
probabilidad = stats.binom.pmf(k, n, p)
print(probabilidad)

"""II. Calcula la probabilidad acumulada de obtener 7 o menos caras en 10 lanzamientos"""

binom.cdf(7, 10, 0.5)

"""III.Grafica la distribución binomial completa para los 10 lanzamientos, mostrando la
probabilidad de obtener desde 0 hasta 10 caras.
"""

# Parámetros
n = 10  # número de lanzamientos
p = 0.5  # probabilidad de que salga cara

# Creacion de valores, que sera, el numero de exitos que se tiene en cada lanzamiento
valores = list(range(11))  #11 ya que se pide del 0 al 10

# Calcular la PMF para cada valor
probabilidades = [binom.pmf(k, n, p) for k in valores]

fig, ax = plt.subplots(figsize=(10, 8))
ax.bar(valores,probabilidades, color='lightblue')
ax.set_title('Distribución Binomial: 10 lanzamientos de una moneda sin trucos')
ax.set_xlabel('Número de caras')
ax.set_ylabel('Probabilidad')
plt.show()

"""IV.Ahora la moneda tiene mayor probabilidad de caer en cara (probabilidad de éxito p =0. 8). ¿Cómo cambian los resultados? Vuelve a realizar los ejercicios I, II y III.

I. Utilizando scipy. stats, crea un programa que modele la probabilidad de obtener un
número específico de éxitos en una serie de lanzamientos de una moneda sin trucos
(probabilidad de éxito p = 0. 8). Genera la probabilidad de obtener exactamente 7 caras
en 10 lanzamientos
"""

# Parámetros
n = 10  # número de lanzamientos
p = 0.8  # probabilidad de éxito (cara)
k = 7  # número de éxitos (caras)

# Cálculo de la probabilidad
probabilidad = stats.binom.pmf(k, n, p)
print(probabilidad)

binom.cdf(7, 10, 0.8)

# Parámetros
n = 10  # número de lanzamientos
p = 0.8  # probabilidad de que salga cara

# Creacion de lista valores, que sera, el numero de exitos que se tiene en cada lanzamiento
valores = list(range(11))  #11 ya que se pide del 0 al 10

# Calcular la PMF para cada valor
probabilidades = [binom.pmf(k, n, p) for k in valores]

fig, ax = plt.subplots(figsize=(10, 8))
ax.bar(valores,probabilidades, color='lightpink')
ax.set_title('Distribución Binomial: 10 lanzamientos de una moneda sin trucos')
ax.set_xlabel('Número de caras')
ax.set_ylabel('Probabilidad')
plt.show()

"""V. Utilizando scipy. stats, realiza un análisis de una distribución normal con una media de
0 y desviación estándar de 1. Genera un conjunto de datos aleatorios con 1000
muestras a partir de esta distribución.
"""

from scipy.stats import norm

analisis = norm.rvs(0, 1, size= 1000)

"""VI. Calcula y muestra la media, la desviación estándar y la mediana de los datos
generados.
"""

import statistics
from scipy import stats

media = statistics.mean(analisis)
print(media)

mediana = statistics.median(analisis)
mediana

des_est= statistics.stdev(analisis)
des_est

"""VII. Grafica el histograma de los datos y superpón la curva de la distribución normal
teórica.
"""

analisis = norm.rvs(0, 1, size=1000)

fig, ax = plt.subplots(figsize=(8, 6))
ax.hist(analisis, bins=30, density=True, alpha=0.6, color='g')
xmin, xmax = ax.get_xlim()
dis_norm = np.linspace(xmin, xmax, 100)
p = norm.pdf(dis_norm, 0, 1)
ax.plot(dis_norm, p, 'k', linewidth=2)

ax.set_title('Histograma de datos generados y curva de distribución normal')
ax.set_xlabel('Valor')
ax.set_ylabel('Densidad de probabilidad')
plt.show()

"""VIII.Calcula la probabilidad de que un valor caiga dentro del rango de -1 a 1 (una desviación
estándar de la media).
"""

norm.cdf(1, media, des_est) - norm.cdf(-1, media, des_est)